// Generated by dts-bundle-generator v9.5.1

import { RegisterMethodEvent } from '@boardmeister/antetype-conditions';
import { ICore, ISettingsDefinition, Modules } from '@boardmeister/antetype-core';
import { Herald } from '@boardmeister/herald';

declare enum Event$1 {
	CALC = "antetype.workspace.calc"
}
export interface ICalcEvent<T extends Record<string, any> = Record<string, any>> {
	purpose: string;
	layerType: string;
	values: T;
}
export interface IWorkspace {
	toRelative: (value: number, direction?: "x" | "y") => string;
	calc: (value: string) => number;
	drawWorkspace: () => void;
	download: (settings: IDownloadSettings) => Promise<void>;
	export: (settings?: IExportSettings) => Promise<Blob>;
	scale: (value: number) => number;
	getQuality: () => number;
	setQuality: (quality: any) => void;
	getScale: () => number;
	setScale: (scale: any) => void;
	getSize: () => IWorkspaceSize;
	setExporting: (toggle: boolean) => void;
	isExporting: () => boolean;
	setTranslateLeft: (left: number) => void;
	setTranslateTop: (top: number) => void;
	getTranslate: () => ITranslate;
}
export interface IWorkspaceSize {
	width: number;
	height: number;
}
export enum BlobTypes {
	WEBP = "image/webp",
	PNG = "image/png",
	JPG = "image/jpeg"
}
export interface IWorkspaceSettings {
	height?: number;
	width?: number;
	relative?: {
		height?: number;
		width?: number;
	};
}
export interface IExportSettings {
	type?: BlobTypes | string;
	quality?: number;
	dpi?: number;
}
export interface IDownloadSettings extends IExportSettings {
	filename: string;
}
export interface ITranslate {
	left: number;
	top: number;
}
interface ModulesWithCore extends Modules {
	core: ICore;
}
export declare class Workspace implements IWorkspace {
	#private;
	constructor(canvas: HTMLCanvasElement | null, modules: ModulesWithCore, herald: Herald);
	subscribe(): void;
	calcEventHandle(event: CustomEvent<ICalcEvent>): void;
	setTranslateLeft(left: number): void;
	setTranslateTop(top: number): void;
	getTranslate(): ITranslate;
	setQuality(quality: any): void;
	getQuality(): number;
	getScale(): number;
	setScale(scale: any): void;
	scale(value: number): number;
	typeToExt(ext?: string): string;
	download(exportArguments: IDownloadSettings): Promise<void>;
	export({ type, quality, dpi }?: IExportSettings): Promise<Blob>;
	clearCanvas(): void;
	setExporting(toggle: boolean): void;
	isExporting(): boolean;
	drawWorkspace(): void;
	getLeft(): number;
	getTop(): number;
	setOrigin(): void;
	restore(): void;
	toRelative(value: number, direction?: "x" | "y", precision?: number): string;
	calc(operation: any, quiet?: boolean): number;
	getSize(): IWorkspaceSize;
	handleConditionsMethodRegisterMethod(e: RegisterMethodEvent): void;
	getSettingsDefinition(): ISettingsDefinition;
}
export declare const ID = "workspace";
export declare const VERSION = "0.0.4";

export {
	Event$1 as Event,
};

export {};
