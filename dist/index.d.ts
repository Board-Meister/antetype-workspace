// Generated by dts-bundle-generator v9.5.1

import { ICore, Modules, ModulesEvent } from '@boardmeister/antetype-core';
import { Herald, ISubscriber, Subscriptions } from '@boardmeister/herald';
import { IInjectable } from '@boardmeister/marshal';
import { Minstrel } from '@boardmeister/minstrel';

export interface ModulesWithCore extends Modules {
	core: ICore;
}
export interface ICalcEvent<T extends Record<string, any> = Record<string, any>> {
	purpose: string;
	layerType: string;
	values: T;
}
export interface IWorkspace {
	toRelative: (value: number, direction?: "x" | "y") => string;
	calc: (value: string) => number;
	drawWorkspace: () => void;
	download: (settings: IDownloadSettings) => Promise<void>;
	export: (settings?: IExportSettings) => Promise<Blob>;
	scale: (value: number) => number;
	getQuality: () => number;
	setQuality: (quality: any) => void;
	getScale: () => number;
	setScale: (scale: any) => void;
	getSize: () => IWorkspaceSize;
	setExporting: (toggle: boolean) => void;
	isExporting: () => boolean;
	setTranslateLeft: (left: number) => void;
	setTranslateTop: (top: number) => void;
	getTranslate: () => ITranslate;
}
export interface IWorkspaceSize {
	width: number;
	height: number;
}
export declare enum BlobTypes {
	WEBP = "image/webp",
	PNG = "image/png",
	JPG = "image/jpeg"
}
export interface IWorkspaceSettings {
	height?: number;
	width?: number;
	relative?: {
		height?: number;
		width?: number;
	};
}
export interface IExportSettings {
	type?: BlobTypes | string;
	quality?: number;
	dpi?: number;
}
export interface IDownloadSettings extends IExportSettings {
	filename: string;
}
export interface ITranslate {
	left: number;
	top: number;
}
export interface IInjected extends Record<string, object> {
	minstrel: Minstrel;
	herald: Herald;
}
declare enum Event$1 {
	CALC = "antetype.workspace.calc"
}
export declare class AntetypeWorkspace {
	#private;
	static inject: Record<string, string>;
	inject(injections: IInjected): void;
	register(event: CustomEvent<ModulesEvent>): Promise<void>;
	static subscriptions: Subscriptions;
}
declare const EnAntetypeWorkspace: IInjectable<IInjected> & ISubscriber;

export {
	EnAntetypeWorkspace as default,
	Event$1 as Event,
};

export {};
